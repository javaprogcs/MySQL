说到索引，很多都知道 "索引是一个排序的列表，在这里列表中存储索引的值和包含这个值的数据所在行的物理地址，在数据十分庞大的时候，索引可以大大加快查询的速度，
这是因为使用索引后可以不用扫描全表来定位某行的数据，而是先通过索引表找到该行数据对应的物理地址然后访问相应的数据。"

但是索引是怎么实现的呢？因为索引并不是关系模型的组成部分，因此不同的DBMS有不同的实现，我们针对Mysql数据库的实现进行说明。本文内容涉及Mysql中索引的语法、
索引的优缺点、索引的分类、索引的实现原理、索引的使用策略、索引的优化几部分。

一、MySQL中索引的语法
创建索引

在创建表的时候添加索引
 create table mytable(
    id int not null,
    username varchar(16) not null,
    index[indexName] (username(length))
 );

 在创建表以后添加索引
 alter table my_table add[unique] index index_name(column_name);
 或者
 create index index_name on my_table(column_name);

 注意：
 1、索引需要占用磁盘空间，因此在创建索引时要考虑到磁盘空间是否足够
 2、创建索引时需要对表加锁，因此实际操作中需要在业务空闲期间进行

 根据索引查询

  具体查询：
  select * from table_name where column_1 = column_2;(为column_1建立了索引)

  或者模糊查询
  select * from table_name wehre column_1 like '%三'
  select * from table_name where column_1 like '三%'
  select * from table_name where column_1 like '%三%'

  select * from table_name where column_1 like '_好_'

  如果要表示在字符串中既有A又有B，查询语句为：
  select * from table_name where column_1 like '%A%' and column_1 like '%B%';

  select * from table_name where column_1 like '[张李王]三';//表示column_1中有匹配张三、李三、王三都可以
  select * from table_name where column_1 like '['^张李王']三'；//表示column_1中匹配处了张三、李三、王三都可以

  //在模糊查询中，%表示任意0个或多个字符；_表示任意单个字符(有且仅有),通常用来限制字符串长度；[]表示其中的某一个字符；[^]表示除了其中的字符的所有字符

  或者在全文索引中模糊查询
  select * from table_name where match(content) against("word1","word2",...);

  删除索引
   drop index my_index on table_name;
   或者
   alter table table_name drop index index_name;

  查看表中的索引
  show index from table_name

  查看查询语句使用索引的情况
  //explain 加查询语句
  explain select * from table_name where column_1 = '123';

  二、索引的优缺点
  优势：可以快速检索，减少I/O次数,加快检索速度；根据索引分组和排序，可以加快分组和排序

  劣势：索引本身也是表，因此会占用存储空间，一般来说，索引表占用的空间的数据表的1.5倍；索引表的维护和创建需要时间成本，这个成本随着数据量增大而增加；
  构建索引会降低数据表的修改操作(删除、添加、修改)的效率，因为在修改数据表的同时还需要修改索引表；

  三、索引的分类
  常用的索引类型有：主键索引、唯一索引、普通索引、全文索引、组合索引

  1、主键索引：即主索引，根据主键pk_clolum(length) 建立索引，不允许重复，不允许空值；

    alter table 'table_name' add primary key pk_index('col');

  2、唯一索引：用来建立索引的列的值必须是唯一的，允许空值

    alter table 'table_name' add unique index_name('col');

  3、普通索引：用表中的普通列构建的索引，没有任何限制

    alter table 'table_name' add index index_name('col');

  4、全文索引：用大文本对象的列构建的索引(下一部分会讲解)

   alter table 'table_name' add fulltext index ft_index('col');

  5、组合索引：用多个列组合构建的索引，这多个列中的值不允许有空值

   alter table 'table_name' add index index_name('col1','col2','col3');

  *遵循 “最左前缀”原则，把最常用作为检索或排序的列放在最左，依次递减，组合索引相当于建立了col1,col1col2,col1col2col3三个索引，而col2或者col3是不能使用索引的*。

  *在使用组合索引的时候可能因为列名长度过长而导致索引的key太大，导致效率降低，在允许的情况下，可以之前有col1和cole2的前几个字符作为索引*

  alter table 'table_name' add index index_name(col1(4),col2(3));

  表现使用col1的前4个字符和col2的前3个字符作为索引

 四、索引的实现原理
   Mysql支持诸多存储引擎，而各种存储引擎对索引的支持也各不相同，因此mysql数据库支持多种索引类型，如BTree索引，B+Tree索引，哈希索引，全文索引等等。

   1、哈希索引：只有memory(内存)存储引擎支持哈希索引，哈希索引用索引列的值计算该值的hashCode，然后再hashCode相应的位置存执该值所在行数据的物理位置，
   因为使用散列算法，因此访问速度非常快，但是一个值对应一个hashCode，而且是散列的分布方式，因此哈希索引不支持范围查找和排序的功能。

   2、全文索引：FULLTEXT(全文)索引，仅可用于MyISAM和InnoDB,针对较大的数据，生成全文索引非常的消耗时间和空间。对于文本的大对象，或者较大的CHAR类型的数据，
   如果使用普通索引，那么匹配文本前几个字符还是可行的，但是想要匹配文本中间的几个单词，那么就要使用LIKE%word%来匹配，这样需要很长的时间来处理，
   响应时间会大大增加，这种情况下，就可使用FULLTEXT索引了，在生成FULLTEXT索引时，会为文本生成一份单词的清单，在索引时及根据这个单词的清单来索引。
   FULLTEXT可以在创建表的时候创建，也可以在需要的时候用ALTER或者CREATE INDEX来添加：

    //创建表的时候添加FULLTEXT索引
    create table my_table(
        id int(10) primary key,
        name varchar(10) not null,
        my_text text,
        fulltext(my_text)
    )engine=myisam default charset = utf8;

    //创建表以后，在需要的时候添加FULLTEXT索引
    ALTER TABLE my_table ADD FULLTEXT INDEX ft_index(column_name);

 全文索引的查询也有自己特殊的语法，而不能使用LIKE %查询字符串%的模糊查询语法

  select * from table_name match(ft_index) against('查询字符串');

 注意：

 对于较大的数据集，把数据添加到一个没有FULLTEXT索引的表，然后添加FULLTEXT索引的速度比把数据添加到一个已经有FULLTEXT索引的表块。

 5.6版本前的Mysql自带的全文索引只能用于MyISAM存储引擎，如果是其他数据引擎，那么全文索引不会生效。5.6版本之后InnDB存储引擎开始
 支持全文索引

 在Mysql中，全文索引支队英文有用，目前对中文还不支持。5.7版本之后通过使用ngram插件开始支持中文。

 在MySQL中，如果检索的字符串太短则无法检索得到预期的结果，检索的字符串长度至少为4字节，此外，如果检索的字符包括停止词，那么停止词会被忽略。

 3、BTree索引和B+Tree索引

    BTree索引
    BTree是平衡搜索多叉树，设树的度为2d(d>1)，高度为h，那么BTree要满足以下条件：

     每个叶子结点的高度一样，等于h;

     每个非叶子结点由n-1个key和n个指针point组成，其中d <= n <= 2d，key和point相互间隔，结点两点一定是key;

     叶子结点指针都为Null;

     非叶子结点的key都是[key,data]二元组，其中Key表示作为索引的键，data为键值所在行的数据；

     在BTree的机构下，就可以使用二分查找的查找方式，查找复杂度为h*log(n)，一般来说树的高度是很小的，一般为3左右，因此BTree是一个非常高效的查找结构。

 B-Tree索引

    B+Tree是BTree的一个变种，设d为树的度数，h为树的高度，B+Tree和BTree的不同主要在于：

      B+ Tree中的非叶子结点不存储数据，只存储键值；

      B+ Tree的叶子结点没有指针，所有键值都会出现在叶子结点上，且Key存储的键值对应data数据的物理地址；

      B+ Tree的每个非叶子结点由n个键值Key和n个指针point组成；


 B+Tree对比BTree的优点

    1、磁盘读写代价更低

    一般来说B+Tree比BTree更适合实现外存的索引结构，因为存储引擎的设计专家巧妙的利用了外存(磁盘)的存储结构，即磁盘的最小存储单位是扇区(sector)，
    而操作系统的块(block)通常是整数倍的sector，操作系统以页(page)为单位管理内存，一页(page)通常默认为4k，数据库的页通常设置为操作系统页的整数倍，
    因此索引结构的结点被设计为一个页的大小，然后利用外存的"预读取" 原则，每次读取的时候，把整个节点的数据读取到内存中，然后在内存中查找，已知内存
    的读取速度是外存读取I/O速度的几百倍，那么提升查找速度的关键就在于尽可能少的磁盘I/O，那么可以知道，每个节点中的Key个数越多，那么树的高度越小，需要
    I/O的次数越少，因此一般来说B+Tree比BTree更快，因为B+Tree的非叶节点中不存储data，就可以存储更多的key。

    2、查询速度更稳定
    由于B+Tree非叶子节点不存储数据(data)，因此所有的数据都要查询至叶子节点，而叶子节点的高度都是相同的，因此所有数据的查询速度都是一样的。


 4、此外MyISAM和innDB的区别总结如下：

                                          MyISAM和innoDB引擎对比
                                          MyISAM                               innDB
              索引类型                    非聚簇                               聚簇
              支持事务                    是                                   否
              支持表锁                    是                                   是
              支持行锁                    否                                   是 (默认)
              支持外键                    否                                   是
              支持全文索引                是                                   是 (5.6以后支持)
              适用操作类型                大量select下使用                     大量insert、delete和update下使用

 总结如下：
    InnoDB支持事务，支持行级别锁定，支持B-tree、Full-text等索引,不支持Hash索引；

    MyISAM不支持事务，支持表级别锁定，支持B-tree、Full-text等索引，不支持Hash索引；

 此外，Memory不支持事务，支持表级别锁定，支持B-tree、Hash等索引，不支持Full-text索引；

 五、索引的使用策略

 什么时候要使用索引？

    主键自动建立唯一索引；

    经常作为查询条件在where或者order by 语句中出现的列表建立索引；

    作为排序的列要建立索引；

    查询中与其他表关联的字段，外键关系建立索引

    高并发条件下倾向组合索引；

    用于聚合函数的列可以建立索引，例如使用了max(column_1)或者count(column_1)时的column_1就需要建立索引

 什么时候不要使用索引？

    经常增删改的列不要建立索引；

    有大量重复的列不建立索引；

    表记录太少的不要建立索引。只有当数据库里的记录超过了1000条、数据总量也超过了MySQL服务器上的内存总量时，数据库的性能测试结果才有意义。

 索引失效的情况

    在组合索引中不能有列的值为NULL,如果有，那么这一列对组合索引就是无效的。

    在一个select语句中，索引只能使用一次，如果在where中使用了，那么在order by 中就不要用了。

    like操作中，'%aaa%'不会使用索引，也就是索引会失效，但是 'aaa%'可以使用索引。

    在索引的列上使用表达式或者函数会使索引失效，只有在查询条件中使用正则表达式时，只有在搜索模板的第一个字符不是通配符的情况下才能使用索引。

    在查询条件中使用IS NULL 或者 IS NOT NULL会导致索引失效。

 六、索引的优化

    1、最左前缀

    索引的最左前缀和B-Tree中的“最左前缀原理”有关，举例来说就是如果设置了组合索引<col1,col2,col3>那么以下3种情况可以使用索引：col1,
    <col1,col2>，<col1,col2,col3>，其他的列，比如<col2,col3>，<col1,col3>，col2,col3等等都是不能使用索引的。

    根据最左前缀原则，我们一般把排序分组斌率最高的列放在最左彼边,以此类推。

    2、带索引的模糊查询优化

    在上卖弄已经提到，使用LIKE进行模糊查询的时候，'%aaa%'不会使用索引，也就是索引会失效。如果是这种情况，只能使用全文索引来进行优化。

    3、为检索的条件构建全文索引，然后使用

    select * from table_name match(index_colum) angainst('word');

    4、使用短索引

    对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。
    短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。



